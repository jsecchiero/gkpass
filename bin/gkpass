#!/bin/bash

help() {
    echo "
    --user=VALUE
        User target of this script
    --server=VALUE
        Server target of this script
    --pass=VALUE
        New password of the user
    --pass
        Same as --pass=VALUE but in interactive mode
    --unlock-pass=VALUE
        Password for unlock the secrets database, mandatory in headless systems
    --unlock-pass
        Same as --unlock-pass=VALUE but in interactive mode
    "
}

read_password() {
  REPLY="$(
    # always read from the tty even when redirected:
    exec < /dev/tty || exit # || exit only needed for bash

    # save current tty settings:
    tty_settings=$(stty -g) || exit

    # schedule restore of the settings on exit of that subshell
    # or on receiving SIGINT or SIGTERM:
    trap 'stty "$tty_settings"' EXIT INT TERM

    # disable terminal local echo
    stty -echo || exit

    # prompt on tty
    printf "$1"> /dev/tty

    # read password as one line, record exit status
    IFS= read -r password; ret=$?

    # display a newline to visually acknowledge the entered password
    echo > /dev/tty

    # return the password for $REPLY
    printf '%s\n' "$password"
    exit "$ret"
  )"

  echo $REPLY
}

for par in "$@"
do
    case $par in
        '--user='*)
            user=$( echo $par | sed 's/^.*=//' )
            ;;
        '--server='*)
            server=$( echo $par | sed 's/^.*=//' )
            ;;
        '--pass='*)
            pass=$( echo $par | sed 's/^.*=//' )
            ;;
        '--pass')
            pass=$( read_password "User pass: " )
            ;;
        '--unlock-pass='*)
            unlock_pass=$( echo $par | sed 's/^.*=//' )
            ;;
        '--unlock-pass')
            unlock_pass=$( read_password "Unlock pass: " )
            ;;
        '--help')
            help
            ;;
        *)
            echo "Exit with error: Argument not expected"
            help
            exit 1
            ;;
    esac
done

[ "$user" ] || ( echo "Exit with error: --user must be defined"; help; exit 1 ) || exit 1
[ "$server" ] || ( echo "Exit with error: --server must be defined"; help; exit 1 ) || exit 1
[ "$SSH_AUTH_SOCK" ] || [ "$unlock_pass" ] || ( echo "Exit with error: in headless system --unlock-pass must be defined"; help; exit 1 ) || exit 1

export user
export server
export unlock_pass
export pass

main() { 
    if test -n "$unlock_pass"; then
        # If found try to unlock the db first
        export $( echo -n ${unlock_pass} | gnome-keyring-daemon --unlock > /dev/null 2>&1 ) > /dev/null 2>&1 
    fi

    if test -n "$pass"; then
        # If found set a new password
        python -c "import keyring; keyring.set_password( '${server}', '${user}', '${pass}' )"
    fi

    python -c "
import keyring
import sys
password = keyring.get_password( '${server}', '${user}' )
if password:
    sys.stdout.write(password)
    "
}

export -f main

dbus-run-session bash -c main
